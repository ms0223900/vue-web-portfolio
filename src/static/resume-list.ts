/* eslint-disable no-irregular-whitespace */
const resumeList = [
  {
    content: `## 個人原則

    我認為原則比目前擁有的技能還重要，技能可以短時間內透過刻意練習習得，但原則、價值觀可不是一下子就會改變的，甚至可能一輩子都不會變。
    
    您可以透過這部分來先了解我的個人原則，如果光是看完這邊的介紹，就知道我並非您心中期望的人選，那麼技能部分與工作經驗其實也不太重要了。個人能力終究只是「必要」條件而已，適不適合公司的文化才是關鍵，因此會稍微花點篇幅介紹個人原則的部分。
    
  ### 對事不對人
    
    大部分情況都是「理性」對待任何事物，不太會因為個人情感的因素有所偏頗，尤其工作的時候更是如此，即便是面對討厭的人，也不會就此處處反對對方提出的意見，相反的，對於有好感的人，也大多是抱持著公正的態度，幾乎不會有偏袒的情況，但有時候會被說有點冷淡就是了。
    
  ### 不堅持己見
    
    只要對方的意見、建議能讓結果變得更好，這時不會固執於自己的意見，以大局整體的利益為優先。而相對的，如果客觀的整體評估之後，自己的方案是遠遠優於其他方案的話，仍然會堅持到底，畢竟如果能達到好結果和採用自己的方案，能兩全其美當然是更好的。
    
  ### 先規劃再說
    
    現在大家都在鼓吹「先做再說、Just Do It」，但我認為要這麼做的前提是要先有「最低程度的準備規劃」，否則一股腦兒向前衝只會是沒效率的做法。
    
    舉個例子來說，程式這領域（無論前後端、任何語言），只要有在這行業內有待過的人幾乎都有感受過，那些令人很「痛」教訓，就是「沒有事先規劃好」就寫的程式，俗稱的「技術債」就是如此。
    
    因為急於交付功能而沒先做好問題定義、釐清問題所在、規劃架構設計...等，只做出那些「看起來可以動」的程式，就直接提交並部署了，直到問題發生才在那邊「拆炸彈」，這樣的事情在朋友口中或是層出不窮，自己也曾深受其害，也從別人手中接下炸彈...。
    
    儘管自己知道有技術債這種問題，但礙於經驗的不足，有時還是無法避免埋下炸彈，但至少知道該怎麼拆這些炸彈。且有時因為時間、預算的關係，無法充分進行規劃就要趕緊交付，這時我會做好「最低程度的規劃」，至少先向PM、客戶等相關人物問清楚再著手進行，至少這樣才不會反覆修改，畢竟時間就是金錢，也省得以後維護的困擾。`,
  },
  {
    content: `## 整體工作技能

  ### 獨自作業能力
    
    工作大多為獨自一人完成，尤其台中公車動態網站為react接觸半年之後就開始撰寫的專案。
    目前能夠單獨完成「中型規模」（個人作業時長約1~3個月）的網站專案，從需求分析、網站規劃、介面與版面安排（以UX Wireframe為主，介面設計稍微會做，但並非強項）、時程與進度安排、製作與測試（包含單元測試和使用者測試）、與需求方進行確認並修改，到最後的提交並將其部署(Docker image)。
    
  ### 程式風格
    
    主要奉行Clean Code中Bob大叔提到的幾個原則，尤其是「命名」這部分特別關注，盡量寫出一看就知道在做什麼的程式，不只自己受惠，他人也好理解。而每一段程式的撰寫，大多都是以「簡短」為原則，這樣不僅容易閱讀，而且也方便做「測試」，尤其在程式這領域，閱讀程式碼所花的時間比起寫的時間要多更多，所以「好讀」是件很重要的事，也為了不要氣死「未來的自己」（笑）。只是在測試功能或是寫原型的時候，通常就不會顧慮這麼多了。
    
    其他常見的程式風格或原則，像是OOP物件導向，大致理解其原則，但不能說非常熟悉，前陣子在寫遊戲的Side Project時比較常用到，主要作法就是把每個元素是為物件，並將其封裝進行操作。
    
    而SOLID原則，則是「只能意會不能言傳」的程度而已。雖然看了很多次，常看到別人介紹，自己也有在書摘或技術文章中提過，也好像有應用到其中的各個原則。但是到現在還是處於似懂非懂的狀態，不能說是非常理解呢。
    
    演算法方面，前陣子練習完整本「王者歸來」書中的演算法範例，原書的範例皆為python語法，因此用python寫了一次，並且邊寫邊重構，而非照抄範例而已。此外還用JavaScript寫一遍，不只印象更加深刻，在未來某一天有合適的使用場景時，就能馬上使用了。
  ### 合作經驗較少

    獨立作業能力較強，但相對的「合作」的經驗比較缺乏。這樣的影響層面有幾個，其一就是對於大型專案該如何合作分工比較不了解。

    以程式面來看，整體架構該如何設計、團隊程式風格該如何規範、程式有衝突該怎麼解決...等，這些都是我比較沒經驗，這就不只是個人能力強弱的問題，而是該如何配合並且協作，這些都是接下來需要好好學習的。

    而工作面來說，工作項目的分工、與團隊成員的討論、進度控管...等，基於獨立作業的「缺點」，這些都是目前比較少接觸到的，頂多只有與後端合作而已。但以軟體業來說團隊合作才是常態，大多數的軟體都是在大家的努力之下才能完成，因此這方面也是個人認為有所不足的地方。

    雖然相關經驗比較少，但也是有幾個值得一提的經驗，其中一個就是去年參與了g0v的專案(https://github.com/g0v/2020voting-guide)，在某次參加黑客松的契機之下加入了專案的協作，成為其中的一員，而我主要是負責搜尋的功能。這是第一次參與這類型的多人協作專案，成員都是在網路上遠端溝通，幾乎沒有面對面的討論，但專案仍然順利進行，討論都還算順暢，最後也趕在大選之前順利完成，是個難得的經驗。`,
  },
];

export default resumeList;
